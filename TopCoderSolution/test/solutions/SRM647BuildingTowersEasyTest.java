package solutions;

import org.junit.Assert;
import org.junit.Test;

public class SRM647BuildingTowersEasyTest {

	@Test
	public void test1() {
		int n = 100000;
		int[] x = {};
		int[] t = {};
		Assert.assertEquals(99999, SRM647BuildingTowersEasy.maxHeight(n, x, t));
	}

	@Test
	public void test2() {

		int n = 10;
		int[] x = { 3, 8 };
		int[] t = { 1, 1 };
		Assert.assertEquals(3, SRM647BuildingTowersEasy.maxHeight(n, x, t));
	}

	@Test
	public void test3() {

		int n = 97638;
		int[] x = { 8, 1749, 4550, 5388, 6752, 7089, 9737, 14891, 16671, 16821,
				17691, 19753, 24589, 25348, 30114, 32213, 34376, 36467, 37699,
				41490, 44784, 44893, 57316, 58275, 58567, 61122, 61489, 63195,
				64776, 65905, 68788, 69908, 72853, 78152, 78784, 82779, 84488,
				86277, 88611, 92793, 93214, 97583 };
		int[] t = { 16610, 6, 497, 14, 42892, 31, 79, 1203, 518, 31147, 597,
				7846, 1396, 8309, 12, 14, 1148, 433, 23693, 13, 1939, 244, 19,
				46, 27, 611, 412, 10, 27023, 19141, 34, 15667, 588, 10, 229,
				83, 390, 14, 38441, 16021, 4, 39386 };
		Assert.assertEquals(6343, SRM647BuildingTowersEasy.maxHeight(n, x, t));
	}

	@Test
	public void test4() {
		int n = 2718;
		int[] x = { 1, 30, 400, 1300, 2500 };
		int[] t = { 100000, 100000, 100000, 100000, 100000 };
		Assert.assertEquals(2717, SRM647BuildingTowersEasy.maxHeight(n, x, t));
	}

	@Test
	public void test5() {

		int n = 2201;
		int[] x = { 5, 51, 160, 229, 310, 377, 406, 492, 528, 535, 549, 593,
				600, 692, 701, 746, 836, 848, 914, 1002, 1084, 1120, 1132,
				1142, 1145, 1253, 1266, 1282, 1305, 1328, 1336, 1344, 1515,
				1529, 1566, 1611, 1612, 1613, 1774, 1795, 1861, 2045, 2048,
				2142, 2194 };
		int[] t = { 2772, 11742, 39, 1743, 1096, 153, 9, 12, 8936, 34, 463,
				650, 34, 1, 6, 4764, 73101, 11, 139, 1, 5096, 51, 2434, 1284,
				62645, 6, 55657, 326, 18, 1, 319, 637, 333, 6, 33420, 14, 5,
				13, 7, 56, 10211, 1497, 5439, 5, 1031 };
		Assert.assertEquals(190, SRM647BuildingTowersEasy.maxHeight(n, x, t));
	}

	@Test
	public void test6() {

		int n = 53851;
		int[] x = { 2544, 3346, 3350, 7848, 7878, 9459, 10845, 11420, 11533,
				12064, 13110, 13637, 14378, 16812, 17488, 18411, 19329, 22904,
				23682, 23706, 24281, 24630, 25020, 25254, 25344, 25458, 26916,
				29382, 29725, 29981, 30096, 30312, 31227, 31420, 35471, 37240,
				39823, 40734, 40885, 41119, 41208, 43890, 44094, 46587, 48392,
				49194, 49446, 49838, 50645, 53692 };
		int[] t = { 10816, 66753, 12117, 67030, 38336, 41631, 78642, 85592,
				73535, 42195, 20392, 76025, 15500, 9427, 19605, 63723, 66910,
				18232, 75398, 60959, 12485, 93305, 4123, 94630, 78949, 92527,
				19792, 1800, 62295, 34032, 70615, 73888, 20715, 15806, 96868,
				42194, 22277, 52585, 92588, 62385, 5295, 33828, 99000, 73614,
				56307, 88626, 31128, 79159, 35651, 28727 };
		Assert.assertEquals(17938, SRM647BuildingTowersEasy.maxHeight(n, x, t));
	}

	@Test
	public void test7() {

		int n = 98615;
		int[] x = { 104, 243, 298, 4491, 5494, 8391, 12398, 12744, 16926,
				18611, 19090, 29509, 30758, 31333, 41537, 42199, 42574, 43690,
				46483, 49201, 50340, 51929, 52102, 55340, 55608, 56224, 56409,
				58908, 59477, 62535, 63502, 68575, 71433, 71927, 72563, 73011,
				73128, 74694, 75102, 76400, 84533, 85578, 86020, 88209, 90795,
				91016, 95505, 96420, 96970, 96991 };
		int[] t = { 36517, 6333, 37366, 25789, 66155, 37221, 86732, 7893,
				27827, 548, 20147, 13667, 3172, 83527, 55570, 99306, 96484,
				67587, 44067, 62750, 82242, 42493, 8087, 34443, 18428, 91178,
				54662, 11574, 95468, 69920, 55632, 28399, 79733, 20280, 77739,
				31177, 27870, 14167, 14285, 5216, 93599, 51486, 16998, 83689,
				22190, 972, 51889, 53090, 29458, 99175 };
		Assert.assertEquals(17141, SRM647BuildingTowersEasy.maxHeight(n, x, t));
	}

	@Test
	public void test8() {

		int n = 65149;
		int[] x = { 1609, 2058, 2845, 2969, 3528, 4967, 7156, 8825, 12932,
				15477, 17885, 19254, 19836, 21171, 21378, 23156, 27589, 28172,
				31202, 31403, 31662, 38331, 38934, 40103, 42301, 44976, 47039,
				47324, 48549, 51335, 53551, 54474, 56139, 60276, 61137, 63495,
				64394 };
		;
		int[] t = { 2, 23, 20, 41, 12, 57, 46, 37, 91, 77, 37, 49, 28, 57, 33,
				79, 99, 88, 50, 57, 73, 4, 94, 65, 21, 33, 5, 14, 83, 96, 96,
				87, 21, 23, 92, 45, 71 };
		Assert.assertEquals(3373, SRM647BuildingTowersEasy.maxHeight(n, x, t));
	}

	@Test
	public void test9() {

		int n = 63391;
		int[] x = { 1026, 1477, 1497, 2701, 3768, 3995, 4325, 4701, 6089, 6162,
				6686, 7664, 8267, 9153, 12959, 14382, 15955, 16035, 17913,
				21257, 22724, 22793, 24718, 24856, 30589, 31090, 31867, 31995,
				32355, 36003, 36527, 36676, 37142, 39080, 39684, 40749, 41212,
				44221, 49127, 49526, 49860, 52028, 52880, 53049, 55345, 55591,
				58988, 59744, 59893, 60245 };
		int[] t = { 30066, 87897, 2496, 8290, 52363, 21755, 8862, 32935, 68007,
				2073, 344, 65972, 96691, 29503, 72613, 13889, 12154, 7302, 31,
				31463, 39698, 73146, 91155, 37953, 2436, 1323, 43866, 14133,
				29529, 66750, 46263, 6550, 97436, 270, 51473, 61140, 1643,
				34196, 1020, 8623, 18736, 35026, 29128, 35106, 68, 38329,
				36087, 6034, 92749, 8825 };
		Assert.assertEquals(8114, SRM647BuildingTowersEasy.maxHeight(n, x, t));
	}

	@Test
	public void test10() {

		int n = 9;
		int[] x = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		int[] t = { 0, 5, 0, 7, 0, 2, 4, 10, 8 };
		Assert.assertEquals(4, SRM647BuildingTowersEasy.maxHeight(n, x, t));
	}
}
